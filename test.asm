asm
;0020080001
;0201009020
;8001101040
ORG 0x03ED
MASK: WORD 0x00FF
N: WORD 0x0
test_2_data:WORD 0xA233; =1010 0010 0011 0011 -> 1101 0001 0001 1001 = D119
test_2_res: WORD 0xD119
test_7_data:WORD 0x9DCF; =1010 0010 0011 0011 -> 1101 0001 0001 1001 = D119
test_7_res: WORD 0xCEE7
RESULTS_START: WORD $RESULTS
RESULTS_ADDR: WORD $RESULTS
RESULTS: WORD 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 5 тестов
RESULT: WORD 0x0



START:
CLA

LD test_2_res   
PUSH
LD test_2_data
PUSH
CALL MULTY_TEST

LD #0x1A   ;0011 0100 -> 0001 1010 = 1A
PUSH
LD #0x34
PUSH
CALL MULTY_TEST



CLA
PUSH
PUSH
CALL MULTY_TEST

LD #0xFF
PUSH
PUSH
CALL MULTY_TEST

LD test_7_res   
PUSH
LD test_7_data
PUSH
CALL MULTY_TEST

CALL GENERAL_CHECK

HLT

GENERAL_CHECK:
LD RESULTS_START
ST RESULTS_ADDR
LD #15 ;5(количество тестов)*3=15  3f4
ST N
LD #0x1
CHECK_LOOP:
AND (RESULTS_ADDR)+
loop N
JUMP CHECK_LOOP
ST RESULT
RET

WRITE_RES:
LD &0x1
ST (RESULTS_ADDR)+
SWAP
ST &0x1
SWAP

SWAP
POP
RET

;(DATA, RES)
MULTY_TEST:

LD &0x2
PUSH
LD &0x2
PUSH
CALL TEST_RES

LD &0x1
PUSH
CALL TEST_SAVE_NZVC

LD &0x1
PUSH
CALL TEST_SAVE_AC

SWAP
ST &0x2
SWAP

SWAP
POP
SWAP
POP
RET

;(DATA, RES)
TEST_RES: LD &0x1
ST M
CALL COMMAND
LD M
CMP &0x2
BEQ PASSED_TEST1
LD #0x0
JUMP END_TEST1
PASSED_TEST1: LD #0x1
END_TEST1: PUSH
CALL WRITE_RES
SWAP
ST &0x2
SWAP
SWAP
POP
SWAP
POP
RET

TEST_SAVE_NZVC:
LD &0x1
ST M

PUSHF	;PUSH FLAGS

CALL COMMAND
PUSHF	;GET FLAGS
POP
CMP &0x0
BEQ PASSED_TEST2
LD #0x0
JUMP END_TEST2
PASSED_TEST2: LD #0x1
END_TEST2: PUSH
CALL WRITE_RES

SWAP
POP
SWAP
ST &0x1
SWAP
SWAP
POP
RET

TEST_SAVE_AC:
LD &0x1
ST M
PUSH
CALL COMMAND
CMP &0x0
BEQ PASSED_TEST3
LD #0x0
JUMP END_TEST3
PASSED_TEST3: LD #0x1
END_TEST3: PUSH
CALL WRITE_RES
SWAP
POP
SWAP
ST &0x1
SWAP

SWAP
POP
RET



M: WORD 0x8
COMMAND:
WORD 0x9EFE ;MyCommand M
;cmc
;LD #0xFF
RET

;>>> def g(a):
;...     s = bin(int(a, 16)>>1)[2:]
;...     s = "0"*(4-len(s)%4)+s
;...     return [s[i:i+4] for i in range(0, len(s), 4)]

END

